= RESTful and Beyond - Building Services from the Ground Up
John D. Ament
:backend: dzslides
:dzslides-style: tomorrow
:dzslides-transition: horizontal-slide
:dzslides-fonts: family=Yanone+Kaffeesatz:400,700,200,300&family=Cedarville+Cursive
:dzslides-highlight: tomorrow-night-bright

[.topic.bg]
== Apache DeltaSpike

[.topic.intro]
== Intro
[.incremental]
* Leverage Apache DeltaSpike to build CDI based applications
* Learn about microservices, deploying light weight applications on the JVM without an application server
* Build using Java EE technologies in SE

[.topic.intro]
== About Me

|===
| Apache DeltaSpike PMC | Software Architect @ Sparta Systems
| CDI 2.0 Expert Group Member | Twitter @JohnAment
|===
* Building *microservices* for ten years
* Presentation content available at *http://bit.ly/j1-tut2184*

|===
| image:ds-logo.png[DeltaSpikeLogo, 200] | image:339029-DukeChoice-100x176.png[DeltaSpikeDukesChoice]
|===

[.topic.intro]
== Building a Real API
[.incremental]
* Deploy a simple API server, easy to configure and start
* Create a simple course management API
* Allow for creation and read of courses - save it in a database!
* Allow people to enroll for a course (free of charge!)
* Don't allow new enrollment after 5 enrollees
* Push notification of course availability
* Push notification whenever a course fills up
* We want to track all API requests

[.topic.intro]
== The Technologies
[.incremental]
* *Java EE* Technologies
* JBoss Weld (CDI)
* Apache DeltaSpike (CDI Extensions)
* JBoss RestEasy (JAX-RS)
* JBoss Undertow (Servlet & WebSocket)
* Hibernate ORM (JPA)
* Hibernate Validator (Bean Validation)
* Jackson (JSON serialization)
* MongoDB
* Arquillian

[.topic.intro]
== The Server
* Start a CDI runtime
* Use Undertow to run a Servlet Container
* Build a reusable Undertow component to handle component integration

[.topic.intro]
== Container Control

* The ability to start a CDI container regardless of what implementation you are using

[.topic.source]
== Startup.java

[source,java]
--
@Vetoed
public class Startup {
    public static void main(String[] args) {
        Startup startup = new Startup();
        startup.start();
    }

    public void start() {
        CdiContainer cdiContainer = CdiContainerLoader.getCdiContainer();
        cdiContainer.boot();
        cdiContainer.getContextControl().startContexts();

        registerShutdownHook(cdiContainer);

        CDI.current().getBeanManager()
            .fireEvent(new ApplicationStartupEvent());
    }

    private void registerShutdownHook(CdiContainer cdiContainer) {
        Runtime.getRuntime().addShutdownHook(
            new Thread(cdiContainer::shutdown));
    }
}
--

[.topic.intro]
== Application Startup
* Formally, in CDI, there is no concept of an eagerly instantiated bean
* You can do start up work in extensions (e.g. bind `EntityManagers` or HTTP connections)
* In CDI 1.0, only solution was to manually fire an event
* In CDI 1.1+ new `Initialized` to watch for the creation of scopes

[.topic.source]
== ApplicationStartup.java

[source,java]
--
public void onAppStart(
    @Observes @Initialized(ApplicationScoped.class)
    Object object) {
}
--

[.topic.intro]
== Emulating Container Behavior

* In a full blown application server, various contexts will be active
* We can emulate this in DeltaSpike via `ContextControl`

[.topic.intro]
== Context Control

* The ability to start and stop contexts on demand
* Useful in a filter here, to start a context dynamically.

[.topic.source]
== RequestScopedServletRequestListener.java

[source,java]
--
public class CDIRequestListener implements ServletRequestListener {
    @Override
    public void requestDestroyed(ServletRequestEvent e) {
        ((ContextControl)e.getServletRequest()
            .getAttribute("rctx"))
            .stopContext(RequestScoped.class);
    }

    @Override
    public void requestInitialized(ServletRequestEvent e) {
        ContextControl contextControl = CDI.current()
            .select(ContextControl.class).get();
        e.getServletRequest().setAttribute("rctx", contextControl);
        contextControl.startContext(RequestScoped.class);
    }
}
--

[.topic.intro]
== Configuration Tools

* Look up property values across multiple configuration sources
* Ability to inject configuration properties in to beans
* Specify `ConfigSources` as beans

[.topic.source]
== AppConfig.java

[source,java]
--
@ApplicationScoped
public class AppConfig implements PropertyFileConfig {
    public String getPropertyFileName() {
        return "application-configuration.properties";
    }
}

@Inject
@ConfigProperty(name="http.listen.port")
private Integer httpListenPort;

--

[.topic.intro]
== Extra Usecases

* You can also write an interceptor to start contexts on demand, based on method invocation.
* Needed for `RequestScoped` resources
* Excellent for WebSockets, which don't start Requests on demand

[.topic.source]
== RequestScopeInteceptor.java

[source,java]
--
@AroundInvoke
public Object startRequestScope(final InvocationContext ctx) throws Exception {
    Object result = null;
    ContextControl contextControl = null;
    if(!isRequestScopeActive()) {
        contextControl = CDI.current()
            .select(ContextControl.class).get();
        contextControl.startContext(RequestScoped.class);
    }
    try {
        result = ctx.proceed();
    }
    finally {
        if(contextControl != null) {
            contextControl.stopContext(RequestScoped.class);
        }
    }
    return result;
}
--

[.topic.intro]
== Injection Enhancement

* Without these changes, instances of Servlet Objects (Filter, Listener, WebSockets etc) are just instantiated
* These factory classes replace how instances are resolved, leveraging scopes to manage scoping of instances

[.topic.source]
== UndertowCDISupport.java

[source,java]
--
public class CDIClassIntrospecter implements ClassIntrospecter {
    public <T> InstanceFactory<T> createInstanceFactory(Class<T> aClass) throws NoSuchMethodException {
        return new CDIInstanceFactory<>(aClass);
    }
}

public class CDIInstanceFactory<T> implements InstanceFactory<T> {
    private Class<T> aClass;
    public CDIInstanceFactory(Class<T> aClass) {
        this.aClass = aClass;
    }
    public InstanceHandle<T> createInstance() throws InstantiationException {
        return new CDIInstanceHandle<>(aClass);
    }
}

public class CDIInstanceHandle<T> implements InstanceHandle<T> {
    private T instance;
    public CDIInstanceHandle(Class<T> aClass) {
        this.instance = CDI.current().select(aClass).get();
    }
    public T getInstance() {
        return instance;
    }
    public void release() { }
}
--

[.topic.intro]
== Persistence & Data Modules
* Simplified injection of JPA resources
* Transaction management
* Annotation and interface based querying support

[.topic.intro]
== The Long Way
* Use `ConfigProperty` to specify parameters to load
* Manually start `EntityManagerFactory`
* Provide a producer method for your `EntityManager` and manage the transaction.

[.topic.source]
== LongPersistence.java

[source,java]
--
@PostConstruct
public void init() {
    Map<String,String> properties = new HashMap<>();
    properties.put("javax.persistence.jdbc.driver",driver);
    properties.put("javax.persistence.jdbc.url",url);
    properties.put("javax.persistence.jdbc.user",user);
    properties.put("javax.persistence.jdbc.password",password);
    properties.put("javax.persistence.schema-generation.database.action",schemaGen);
    entityManagerFactory = Persistence.createEntityManagerFactory("DefaultApp",properties);
}
--

[.topic.intro]
== The Short Way
* Inject an `EntityManagerFactory` using `@PersistenceUnitName`
* DeltaSpike loads all properties in `persistence-UnitName.properties`
* Provide a producer method for your `EntityManager` and manage the transaction.

[.topic.source]
== ShortPersistence.java

[source,java]
--
@Inject
@PersistenceUnitName("DefaultApp")
private EntityManagerFactory entityManagerFactory;

@Produces
@RequestScoped
public EntityManager entityManager() {
    EntityManager em = entityManagerFactory.createEntityManager();
    EntityTransaction et = em.getTransaction();
    et.begin();
    return em;
}

public void cleanEM(@Disposes EntityManager entityManager) {
    EntityTransaction et = entityManager.getTransaction();
    if(et.getRollbackOnly()) {
        et.rollback();
    }
    else {
        et.commit();
    }
    entityManager.close();
}
--

[.topic.intro]
== Transaction Management
* The other feature in persistence is transaction management
* Great for running in an application server where you have a `UserTransaction`
* Supports Resource Local for use in SE mode by default
** Other options available for different deployment options

[.topic.source]
== TransactionPersistence.java

[source,java]
--
@Inject
@PersistenceUnitName("DefaultApp")
private EntityManagerFactory entityManagerFactory;

@Produces
@TransactionScoped
public EntityManager entityManager() {
    return entityManagerFactory.createEntityManager();
}

public void cleanEM(@Disposes EntityManager entityManager) {
    if(entityManager.isOpen()) {
        entityManager.close();
    }
}
--

[.topic.intro]
== JPA Support
* Only necessary to provide a producer for your `EntityManager`
* Everything works out of the box

[.topic.intro]
== Simple Querying Support
* Replaces DAOs
* Contains a lot of useful built in functionality
* Save, find, etc

[.topic.source]
== EmployeeRepository.java

[source,java]
--
@Repository(forEntity = Employees.class)
public interface EmployeeRepository extends
    EntityRepository<Employees,Integer> { }
--

[.topic.intro]
== The Basic REST API
* Leverage what we just put together

[.topic.source]
== CourseRestAPI.java

[source,java]
--
@RequestScoped
@Produces(MediaType.APPLICATION_JSON)
@Consumes(MediaType.APPLICATION_JSON)
@Path("/courses")
@Transactional
public class CourseRestResource {
}
--

[.topic.intro]
== WebSockets Integration

[middle.right.incremental]
* WebSockets JSR has limited CDI integration
** Most work is *platform specific*
* No active contexts when methods are invoked
** Similar to MDBs
* Poor instance creation integration

[.topic.source]
== ResponderServer.java

[source,java]
--
@ApplicationScoped
@ServerEndpoint("/serverSocket")
public class ResponderServer {
    @OnMessage
    @StartsRequestScope
    public void respond(String data, Session session) {
        try {
            CDI.current().select(RequestInvoker.class)
                .get().inRequestScope();
            session.getBasicRemote().sendText("foo");
        } catch (Exception e) { }
    }
}
--

[.topic.intro]
== WebSocket Enhancement

* This also works for clients
* Retrieving the instance via CDI, end up with a single per client program

[.topic.source]
== WebSocketTestClient.java

[source,java]
--
public Session connect(String uri) throws IOException, DeploymentException {
    WebSocketContainer webSocketContainer =
        ContainerProvider.getWebSocketContainer();
    URI endpointURI = URI.create(uri);
    return webSocketContainer
        .connectToServer(WebSocketTestClient.class,endpointURI);
}

public void send(String data, Session session) throws IOException {
    session.getBasicRemote().sendText(data);
}
--

[.topic.intro]
== JAX-RS Filters
* Create a hit when a request comes in
* When response is being sent back, store the hit

[.topic.source]
== StoreAPIHitFilter.java

[source,java]
--
@ApplicationScoped
@Provider
public class StoreAPIHitFilter implements
    ContainerRequestFilter, ContainerResponseFilter {
    @Inject
    private APIHitDAO apiHitDAO;
    public void filter(ContainerRequestContext requestContext)
        throws IOException {
        APIHit hit = new APIHit();
        hit.setUri(requestContext.getUriInfo().getPath());
        hit.setStartTime(new Date());
        requestContext.setProperty("apiHit",hit);
    }
    public void filter(ContainerRequestContext requestContext,
        ContainerResponseContext responseContext)
         throws IOException {
        Object hit = requestContext.getProperty("apiHit");
        if( hit != null ) {
            APIHit apiHit = (APIHit)hit;
            apiHit.setEndTime(new Date());
            apiHitDAO.insert(apiHit);
        }
    }
}
--

[.topic.intro]
== MongoDB Support

* Similar to JPA, provide a producer for `MongoClient`
* Inject that client into DAOs to do work

[.topic.source]
== MongoProducer.java

[source,java]
--
@PostConstruct
public void start() {
    List<ServerAddress> serverAddressList = new ArrayList<>();
    Arrays.stream(mongoConnectionInfo.split(";")).forEach(s -> {
        String[] hostAndPort = s.split(":");
        String host = hostAndPort[0];
        int port = Integer.parseInt(hostAndPort[1]);
        try {
            serverAddressList.add(new ServerAddress(host,port));
        } catch (UnknownHostException e) {
            e.printStackTrace();
        }
    });
    this.mongoClient = new MongoClient(serverAddressList);
}
@Produces
@ApplicationScoped
public MongoClient client() {
    return this.mongoClient;
}
--

[.topic.intro]
== New Requirement Approaching!!

* Oops, not everyone should be able to create a Course.
* Students may not create courses
* Users who are in the coursemanage group may create and maintain courses
* Only students may enroll in courses

[.topic.intro]
== Security Integration

* Interceptor based security
* Annotation based bindings
* Method based injection of dependencies

[.topic.source]
== CourseCreateAuthorizer.java

[source,java]
--
@RequestScoped
public class CourseCreateAuthorizer {
    @Secures
    @CourseCreateBinding
    public boolean canEditCourses
        (InvocationContext invocationContext, User user) {
        return user.getGroups().stream()
            .anyMatch("coursemanage"::equalsIgnoreCase);
    }
}
--

[.topic.intro]
== Security Overview
* Interceptor is invoked before the method is invoked.
* If it returns false, or throws an exception, the method is not invoked
* Typical approach is to bind the logged in user to a RequestScoped bean

[.topic.ending]
== Thank you!

